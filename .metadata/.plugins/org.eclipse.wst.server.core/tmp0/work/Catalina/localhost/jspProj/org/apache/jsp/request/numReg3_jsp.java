/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.75
 * Generated at: 2023-07-31 11:29:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.request;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import oops_p.Exam;
import java.util.Arrays;

public final class numReg3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/green_project/new_jspwork/java_work/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/jspProj/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1690509038365L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("oops_p.Exam");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>numReg3</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String [] per = request.getParameterValues("per");  /* 사람 이름의 집합 */
	String [] kor = request.getParameterValues("kor");  /* 국어 점수의 집합 */
	String [] eng = request.getParameterValues("eng");  /* 영어 점수의 집합 */
	String [] math = request.getParameterValues("math");  /* 수학 점수의 집합 */
	String [] soc = request.getParameterValues("soc");  /* 사회 점수의 집합 */
	String [] sci = request.getParameterValues("sci");  /* 과학 점수의 집합 */
	
	Exam [] exam = new Exam[per.length];  /* Class Exam 인스턴스들의 집합 exam 을 사람 수 만큼 생성*/
	
	for(int i=0; i<per.length; i++){
		exam[i] = new Exam(per[i], kor[i], eng[i], math[i], soc[i], sci[i]);  /* i번째 인스턴스에 i번째(이름,점수들)를 입력 */
	}
		
	for(int i=0; i < exam.length ; i++) {
		exam[i].rankCalc(exam);
		System.out.println(exam[i]);
	}
	// Exam 클래스 안에서 계산되기 때문에 필요없음
	/*int [] sum = new int[per.length];
	float [] avg = new float[per.length];
	for(int i=0; i<sum.length; i++){
		sum[i] += Integer.parseInt(kor[i])+Integer.parseInt(eng[i])+Integer.parseInt(math[i]);
		avg[i] += (float)sum[i] / 3;
	};*/

      out.write("\r\n");
      out.write("<h1>numReg3</h1>\r\n");
      out.write("<h2>출력되라 얍!</h2>\r\n");
      out.write("<!-- 출력부 -->\r\n");
      out.write("<!-- 정렬 전 -->\r\n");
      out.write("<table border=\"\">\r\n");
      out.write("	<tr style=\"background-color: #d6d6d6;\">\r\n");
      out.write("		<th>&emsp;이름&emsp;</th>\r\n");
      out.write("		<th>&emsp;국어&emsp;</th>\r\n");
      out.write("		<th>&emsp;영어&emsp;</th>\r\n");
      out.write("		<th>&emsp;수학&emsp;</th>\r\n");
      out.write("		<th>&emsp;사회&emsp;</th>\r\n");
      out.write("		<th>&emsp;과학&emsp;</th>\r\n");
      out.write("		<th>&emsp;총점&emsp;</th>\r\n");
      out.write("		<th>&emsp;평균&emsp;</th>\r\n");
      out.write("		<th>&emsp;등급&emsp;</th>\r\n");
      out.write("		<th>&emsp;등수&emsp;</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	 ");
 for(int i=0;i<per.length;i++){ 
      out.write("\r\n");
      out.write("	 <tr align=\"center\">\r\n");
      out.write("		<td>");
      out.print(per[i] );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(kor[i] );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(eng[i] );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(math[i] );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(soc[i] );
      out.write("</td>\r\n");
      out.write("		<td>");
      out.print(sci[i] );
      out.write("</td>\r\n");
      out.write("		<td style=\"color: blue; font-weight: bold;\">");
      out.print(exam[i].getTot() );
      out.write("</td>\r\n");
      out.write("		<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getAvg2() );
      out.write("</td>\r\n");
      out.write("		<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getGrade());
      out.write("</td>\r\n");
      out.write("		<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getRank());
      out.write("</td>\r\n");
      out.write("		\r\n");
      out.write("	</tr>\r\n");
      out.write("	");
 } 
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</table>\r\n");
      out.write("<br>\r\n");
      out.write("<hr>\r\n");
      out.write("<!-- 정렬 후 -->\r\n");
      out.write("<h2>정렬 하고시퍼요</h2>\r\n");
      out.write("<table border=\"\">\r\n");
      out.write("	<tr style=\"background-color: #d6d6d6;\">\r\n");
      out.write("		<th>&emsp;이름&emsp;</th>\r\n");
      out.write("		<th>&emsp;국어&emsp;</th>\r\n");
      out.write("		<th>&emsp;영어&emsp;</th>\r\n");
      out.write("		<th>&emsp;수학&emsp;</th>\r\n");
      out.write("		<th>&emsp;사회&emsp;</th>\r\n");
      out.write("		<th>&emsp;과학&emsp;</th>\r\n");
      out.write("		<th>&emsp;총점&emsp;</th>\r\n");
      out.write("		<th>&emsp;평균&emsp;</th>\r\n");
      out.write("		<th>&emsp;등급&emsp;</th>\r\n");
      out.write("		<th>&emsp;등수&emsp;</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	 ");
 for(int r=1; r<=per.length; r++){  /* rank 1번부터 출력하기 위해서 초기값 r=1로 설정 */
			for(int i=0; i<per.length; i++){
				if(r == exam[i].getRank()){ 
      out.write("  <!-- for문 돌리고 getRank()로 등수를 불러와서 r과 같다면 tr,td 출력 -->\r\n");
      out.write("					<tr align=\"center\">\r\n");
      out.write("						<td>");
      out.print(per[i] );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(kor[i] );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(eng[i] );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(math[i] );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(soc[i] );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(sci[i] );
      out.write("</td>\r\n");
      out.write("						<td style=\"color: blue; font-weight: bold;\">");
      out.print(exam[i].getTot() );
      out.write("</td>\r\n");
      out.write("						<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getAvg2() );
      out.write("</td>\r\n");
      out.write("						<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getGrade());
      out.write("</td>\r\n");
      out.write("						<td style=\"background-color: #006cb7; color: #fff; font-weight: bold;\">");
      out.print(exam[i].getRank());
      out.write("</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("	");
}}}
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
